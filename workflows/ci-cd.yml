name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Pipeline срабатывает при пуше в ветку main

jobs:
  test:
    name: Install dependencies and run tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Убедитесь, что версия Python соответствует вашему проекту

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: test # Шаг деплоя запускается только после успешного прохождения тестов

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy files to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          rsync -avz --exclude '.venv' ./ root@${{ secrets.SERVER_IP }}:/root/myproject/

      - name: Install dependencies on server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          source /root/myproject/venv/bin/activate
          pip install -r /root/myproject/requirements.txt
          EOF

      - name: Apply migrations
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          source /root/myproject/venv/bin/activate
          cd /root/myproject/DjangoDRF
          python manage.py migrate
          EOF

      - name: Restart Gunicorn
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          systemctl restart gunicorn
          EOF
